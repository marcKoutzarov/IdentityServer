/*
Deployment script for IdentityServerDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "IdentityServerDB"
:setvar DefaultFilePrefix "IdentityServerDB"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Grants]...';


GO
CREATE TABLE [dbo].[Grants] (
    [ID]           INT            IDENTITY (1, 1) NOT NULL,
    [ClientId]     NVARCHAR (30)  NOT NULL,
    [CreationTime] DATETIME       NOT NULL,
    [Data]         NVARCHAR (MAX) NOT NULL,
    [Expiration]   DATETIME       NOT NULL,
    [Key]          NVARCHAR (MAX) NOT NULL,
    [SubjectId]    NVARCHAR (30)  NOT NULL,
    [Type]         NVARCHAR (40)  NOT NULL,
    [Enabled]      BIT            NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[EnumTokenTypes]...';


GO
CREATE TABLE [dbo].[EnumTokenTypes] (
    [ID]          INT            IDENTITY (1, 1) NOT NULL,
    [Type]        NVARCHAR (40)  NOT NULL,
    [Description] NVARCHAR (100) NOT NULL,
    [DateCreated] DATETIME       NOT NULL,
    [CreatedBy]   NVARCHAR (50)  NOT NULL,
    [Updated]     DATETIME       NOT NULL,
    [UpdatedBy]   NVARCHAR (50)  NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC),
    UNIQUE NONCLUSTERED ([Type] ASC)
);


GO
PRINT N'Creating [dbo].[ClientsScopes]...';


GO
CREATE TABLE [dbo].[ClientsScopes] (
    [ID]          INT           IDENTITY (1, 1) NOT NULL,
    [ClientID]    INT           NOT NULL,
    [ApiScopesId] INT           NOT NULL,
    [DateCreated] DATETIME      NOT NULL,
    [CreatedBy]   NVARCHAR (50) NOT NULL,
    [Updated]     DATETIME      NOT NULL,
    [UpdatedBy]   NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[Apis]...';


GO
CREATE TABLE [dbo].[Apis] (
    [ID]          INT            IDENTITY (1, 1) NOT NULL,
    [ApiId]       NVARCHAR (100) NOT NULL,
    [DisplayName] NVARCHAR (50)  NOT NULL,
    [Description] NVARCHAR (50)  NOT NULL,
    [Secret]      NVARCHAR (100) NOT NULL,
    [Enabled]     BIT            NOT NULL,
    [DateCreated] DATETIME       NOT NULL,
    [CreatedBy]   NVARCHAR (50)  NOT NULL,
    [Updated]     DATETIME       NOT NULL,
    [UpdatedBy]   NVARCHAR (50)  NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC),
    UNIQUE NONCLUSTERED ([ApiId] ASC)
);


GO
PRINT N'Creating [dbo].[Clients]...';


GO
CREATE TABLE [dbo].[Clients] (
    [ID]                  INT            IDENTITY (1, 1) NOT NULL,
    [ClientUserName]      NVARCHAR (100) NOT NULL,
    [Description]         NVARCHAR (100) NOT NULL,
    [Secret]              NVARCHAR (MAX) NOT NULL,
    [EnumTokenTypeId]     INT            NOT NULL,
    [AccessTokenLifetime] INT            NOT NULL,
    [Role]                NVARCHAR (40)  NOT NULL,
    [IsActive]            BIT            NOT NULL,
    [DateCreated]         DATETIME       NOT NULL,
    [CreatedBy]           NVARCHAR (50)  NOT NULL,
    [Updated]             DATETIME       NOT NULL,
    [UpdatedBy]           NVARCHAR (50)  NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC),
    UNIQUE NONCLUSTERED ([ClientUserName] ASC)
);


GO
PRINT N'Creating [dbo].[EnumClientRoles]...';


GO
CREATE TABLE [dbo].[EnumClientRoles] (
    [ID]          INT            IDENTITY (1, 1) NOT NULL,
    [Role]        NVARCHAR (40)  NOT NULL,
    [Description] NVARCHAR (100) NOT NULL,
    [DateCreated] DATETIME       NOT NULL,
    [CreatedBy]   NVARCHAR (50)  NOT NULL,
    [Updated]     DATETIME       NOT NULL,
    [UpdatedBy]   NVARCHAR (50)  NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC),
    UNIQUE NONCLUSTERED ([Role] ASC)
);


GO
PRINT N'Creating [dbo].[EnumUserRoles]...';


GO
CREATE TABLE [dbo].[EnumUserRoles] (
    [ID]          INT            IDENTITY (1, 1) NOT NULL,
    [Role]        NVARCHAR (40)  NOT NULL,
    [Description] NVARCHAR (100) NOT NULL,
    [DateCreated] DATETIME       NOT NULL,
    [CreatedBy]   NVARCHAR (50)  NOT NULL,
    [Updated]     DATETIME       NOT NULL,
    [UpdatedBy]   NVARCHAR (50)  NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC),
    UNIQUE NONCLUSTERED ([Role] ASC)
);


GO
PRINT N'Creating [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [SubjectId]   INT            IDENTITY (1, 1) NOT NULL,
    [Username]    NVARCHAR (100) NOT NULL,
    [Password]    NVARCHAR (MAX) NOT NULL,
    [GivenName]   NVARCHAR (70)  NULL,
    [FamilyName]  NVARCHAR (70)  NULL,
    [Role]        NVARCHAR (40)  NOT NULL,
    [Email]       NVARCHAR (100) NOT NULL,
    [IsActive]    BIT            NOT NULL,
    [Salt]        NVARCHAR (MAX) NOT NULL,
    [DateCreated] DATETIME       NOT NULL,
    [CreatedBy]   NVARCHAR (50)  NOT NULL,
    [Updated]     DATETIME       NOT NULL,
    [UpdatedBy]   NVARCHAR (50)  NOT NULL,
    PRIMARY KEY CLUSTERED ([SubjectId] ASC),
    UNIQUE NONCLUSTERED ([Username] ASC)
);


GO
PRINT N'Creating [dbo].[EnumApiScopes]...';


GO
CREATE TABLE [dbo].[EnumApiScopes] (
    [ID]          INT            IDENTITY (1, 1) NOT NULL,
    [Scope]       NVARCHAR (40)  NOT NULL,
    [Description] NVARCHAR (100) NOT NULL,
    [DateCreated] DATETIME       NOT NULL,
    [CreatedBy]   NVARCHAR (50)  NOT NULL,
    [Updated]     DATETIME       NOT NULL,
    [UpdatedBy]   NVARCHAR (50)  NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC),
    UNIQUE NONCLUSTERED ([Scope] ASC)
);


GO
PRINT N'Creating [dbo].[ApisScopes]...';


GO
CREATE TABLE [dbo].[ApisScopes] (
    [ID]          INT           IDENTITY (1, 1) NOT NULL,
    [ApiID]       INT           NOT NULL,
    [Scope]       NVARCHAR (40) NOT NULL,
    [DateCreated] DATETIME      NOT NULL,
    [CreatedBy]   NVARCHAR (50) NOT NULL,
    [Updated]     DATETIME      NOT NULL,
    [UpdatedBy]   NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[Grants]...';


GO
ALTER TABLE [dbo].[Grants]
    ADD DEFAULT GetDate() FOR [CreationTime];


GO
PRINT N'Creating unnamed constraint on [dbo].[Grants]...';


GO
ALTER TABLE [dbo].[Grants]
    ADD DEFAULT GetDate() FOR [Expiration];


GO
PRINT N'Creating unnamed constraint on [dbo].[Grants]...';


GO
ALTER TABLE [dbo].[Grants]
    ADD DEFAULT 1 FOR [Enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[EnumTokenTypes]...';


GO
ALTER TABLE [dbo].[EnumTokenTypes]
    ADD DEFAULT Getdate() FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[EnumTokenTypes]...';


GO
ALTER TABLE [dbo].[EnumTokenTypes]
    ADD DEFAULT Getdate() FOR [Updated];


GO
PRINT N'Creating unnamed constraint on [dbo].[ClientsScopes]...';


GO
ALTER TABLE [dbo].[ClientsScopes]
    ADD DEFAULT Getdate() FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[ClientsScopes]...';


GO
ALTER TABLE [dbo].[ClientsScopes]
    ADD DEFAULT Getdate() FOR [Updated];


GO
PRINT N'Creating unnamed constraint on [dbo].[Apis]...';


GO
ALTER TABLE [dbo].[Apis]
    ADD DEFAULT 1 FOR [Enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[Apis]...';


GO
ALTER TABLE [dbo].[Apis]
    ADD DEFAULT Getdate() FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[Apis]...';


GO
ALTER TABLE [dbo].[Apis]
    ADD DEFAULT Getdate() FOR [Updated];


GO
PRINT N'Creating unnamed constraint on [dbo].[Clients]...';


GO
ALTER TABLE [dbo].[Clients]
    ADD DEFAULT 900 FOR [AccessTokenLifetime];


GO
PRINT N'Creating unnamed constraint on [dbo].[Clients]...';


GO
ALTER TABLE [dbo].[Clients]
    ADD DEFAULT Getdate() FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[Clients]...';


GO
ALTER TABLE [dbo].[Clients]
    ADD DEFAULT Getdate() FOR [Updated];


GO
PRINT N'Creating unnamed constraint on [dbo].[EnumClientRoles]...';


GO
ALTER TABLE [dbo].[EnumClientRoles]
    ADD DEFAULT Getdate() FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[EnumClientRoles]...';


GO
ALTER TABLE [dbo].[EnumClientRoles]
    ADD DEFAULT Getdate() FOR [Updated];


GO
PRINT N'Creating unnamed constraint on [dbo].[EnumUserRoles]...';


GO
ALTER TABLE [dbo].[EnumUserRoles]
    ADD DEFAULT Getdate() FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[EnumUserRoles]...';


GO
ALTER TABLE [dbo].[EnumUserRoles]
    ADD DEFAULT Getdate() FOR [Updated];


GO
PRINT N'Creating unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT 'defaultSalt' FOR [Salt];


GO
PRINT N'Creating unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT Getdate() FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT Getdate() FOR [Updated];


GO
PRINT N'Creating unnamed constraint on [dbo].[EnumApiScopes]...';


GO
ALTER TABLE [dbo].[EnumApiScopes]
    ADD DEFAULT Getdate() FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[EnumApiScopes]...';


GO
ALTER TABLE [dbo].[EnumApiScopes]
    ADD DEFAULT Getdate() FOR [Updated];


GO
PRINT N'Creating unnamed constraint on [dbo].[ApisScopes]...';


GO
ALTER TABLE [dbo].[ApisScopes]
    ADD DEFAULT Getdate() FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[ApisScopes]...';


GO
ALTER TABLE [dbo].[ApisScopes]
    ADD DEFAULT Getdate() FOR [Updated];


GO
PRINT N'Creating [dbo].[FK_ClientsScopes_Clients]...';


GO
ALTER TABLE [dbo].[ClientsScopes]
    ADD CONSTRAINT [FK_ClientsScopes_Clients] FOREIGN KEY ([ClientID]) REFERENCES [dbo].[Clients] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Clients_EnumTokenTypes]...';


GO
ALTER TABLE [dbo].[Clients]
    ADD CONSTRAINT [FK_Clients_EnumTokenTypes] FOREIGN KEY ([EnumTokenTypeId]) REFERENCES [dbo].[EnumTokenTypes] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Clients_EnumClientRoles]...';


GO
ALTER TABLE [dbo].[Clients]
    ADD CONSTRAINT [FK_Clients_EnumClientRoles] FOREIGN KEY ([Role]) REFERENCES [dbo].[EnumClientRoles] ([Role]);


GO
PRINT N'Creating [dbo].[FK_Clients_EnumUsertRoles]...';


GO
ALTER TABLE [dbo].[Users]
    ADD CONSTRAINT [FK_Clients_EnumUsertRoles] FOREIGN KEY ([Role]) REFERENCES [dbo].[EnumUserRoles] ([Role]);


GO
PRINT N'Creating [dbo].[FK_ApisScopes_Apis]...';


GO
ALTER TABLE [dbo].[ApisScopes]
    ADD CONSTRAINT [FK_ApisScopes_Apis] FOREIGN KEY ([ApiID]) REFERENCES [dbo].[Apis] ([ID]);


GO
PRINT N'Creating [dbo].[FK_ApisScopes_EnumScopes]...';


GO
ALTER TABLE [dbo].[ApisScopes]
    ADD CONSTRAINT [FK_ApisScopes_EnumScopes] FOREIGN KEY ([Scope]) REFERENCES [dbo].[EnumApiScopes] ([Scope]);


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '96ccce2c-60cc-4eb6-b120-29685ba2a3cd')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('96ccce2c-60cc-4eb6-b120-29685ba2a3cd')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'cbf43445-2163-440f-bdc4-ae9ff1ea2771')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('cbf43445-2163-440f-bdc4-ae9ff1ea2771')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '83501082-d463-4f83-be9c-51013b68f5b7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('83501082-d463-4f83-be9c-51013b68f5b7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5886c850-4bcb-4e72-be16-c380ede363fe')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5886c850-4bcb-4e72-be16-c380ede363fe')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a591b1c0-fce9-49be-a915-3718f31d0f9c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a591b1c0-fce9-49be-a915-3718f31d0f9c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '782a9d9a-b652-454e-bf55-3f6f54cea195')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('782a9d9a-b652-454e-bf55-3f6f54cea195')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '10503cd3-5729-49a8-86bd-567c18a9d913')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('10503cd3-5729-49a8-86bd-567c18a9d913')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7b11a995-ae9e-432b-bffa-05d08c45cf0b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7b11a995-ae9e-432b-bffa-05d08c45cf0b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '407cfce1-63ec-4c9c-9a66-62cc096bc054')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('407cfce1-63ec-4c9c-9a66-62cc096bc054')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9aace76d-0884-48da-9e9c-ec83f7d85a22')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9aace76d-0884-48da-9e9c-ec83f7d85a22')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1c94ceeb-b804-4be7-b2cc-778b83f2e3f8')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1c94ceeb-b804-4be7-b2cc-778b83f2e3f8')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd9202fb7-d3ad-4c61-a773-64cfb7b60fca')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d9202fb7-d3ad-4c61-a773-64cfb7b60fca')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b9afdfbe-aa8b-49ec-97c9-00e8f7a0b68f')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b9afdfbe-aa8b-49ec-97c9-00e8f7a0b68f')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a4750232-28b6-43f3-9ba7-f1040412468b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a4750232-28b6-43f3-9ba7-f1040412468b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '0591c29b-ac7b-4269-9002-02a4f78ced80')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('0591c29b-ac7b-4269-9002-02a4f78ced80')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '284beb5c-0482-4a66-8fd6-719a4d6bea06')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('284beb5c-0482-4a66-8fd6-719a4d6bea06')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8e83b1bb-8ee2-4cab-a5a4-c40a076ca14d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8e83b1bb-8ee2-4cab-a5a4-c40a076ca14d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b32bc748-e8d2-4631-a69a-b2b3c27ef75c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b32bc748-e8d2-4631-a69a-b2b3c27ef75c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'cdff58ba-6ccc-4b99-b120-3c23d58dc140')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('cdff58ba-6ccc-4b99-b120-3c23d58dc140')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '59697f96-7172-4726-949b-97bbe5cfeb1a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('59697f96-7172-4726-949b-97bbe5cfeb1a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '72ea43cb-f1ea-471b-8f0f-5ca29b5a4e48')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('72ea43cb-f1ea-471b-8f0f-5ca29b5a4e48')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'db212bbc-7d8f-4848-ad3e-6732499d5fba')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('db212bbc-7d8f-4848-ad3e-6732499d5fba')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e808e230-3749-4210-971d-0fc22c1ae192')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e808e230-3749-4210-971d-0fc22c1ae192')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3c0f2bf5-227a-4979-b4d7-5671ca47533b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3c0f2bf5-227a-4979-b4d7-5671ca47533b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '45cf6016-5697-486b-a50c-ff7bff66ee6d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('45cf6016-5697-486b-a50c-ff7bff66ee6d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd68db057-5d1c-4580-bb30-03d3dbd03794')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d68db057-5d1c-4580-bb30-03d3dbd03794')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b924552d-55bc-4a4e-8c5e-9304f7e987e9')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b924552d-55bc-4a4e-8c5e-9304f7e987e9')

GO

GO

BEGIN
IF NOT EXISTS (select ID FROM [IdentityServerDB].[dbo].[EnumClientRoles] WHERE [Role]='frontend' )
INSERT INTO [IdentityServerDB].[dbo].[EnumClientRoles]
           ([Role]
           ,[Description]
           ,[CreatedBy]
           ,[UpdatedBy])
     VALUES
           ('frontend', 'A frontend application.', 'init script','init script')
END
BEGIN
IF NOT EXISTS (select ID FROM [IdentityServerDB].[dbo].[EnumClientRoles] WHERE [Role]='api' )
INSERT INTO [IdentityServerDB].[dbo].[EnumClientRoles]
           ([Role]
           ,[Description]
           ,[CreatedBy]
           ,[UpdatedBy])
     VALUES
           ('api', 'An webapi application.', 'init script','init script')
END
BEGIN
IF NOT EXISTS (select ID FROM [IdentityServerDB].[dbo].[EnumClientRoles] WHERE [Role]='internal' )
INSERT INTO [IdentityServerDB].[dbo].[EnumClientRoles]
           ([Role]
           ,[Description]
           ,[CreatedBy]
           ,[UpdatedBy])
     VALUES
           ('internal', 'An internal user', 'init script','init script')
END
BEGIN
IF NOT EXISTS (select ID FROM [IdentityServerDB].[dbo].[EnumClientRoles] WHERE [Role]='service' )
INSERT INTO [IdentityServerDB].[dbo].[EnumClientRoles]
           ([Role]
           ,[Description]
           ,[CreatedBy]
           ,[UpdatedBy])
     VALUES
           ('service', 'A service application.', 'init script','init script')
END








BEGIN
IF NOT EXISTS (select ID FROM [IdentityServerDB].[dbo].[EnumUserRoles] WHERE [Role]='customer' )
INSERT INTO [IdentityServerDB].[dbo].[EnumUserRoles]
           ([Role]
           ,[Description]
           ,[CreatedBy]
           ,[UpdatedBy])
     VALUES
           ('customer', 'A customer using the application', 'init script','init script')
END
BEGIN
IF NOT EXISTS (select ID FROM [IdentityServerDB].[dbo].[EnumUserRoles] WHERE [Role]='employee' )
INSERT INTO [IdentityServerDB].[dbo].[EnumUserRoles]
           ([Role]
           ,[Description]
           ,[CreatedBy]
           ,[UpdatedBy])
     VALUES
           ('employee', 'A employee using the application', 'init script','init script')
END
BEGIN
IF NOT EXISTS (select ID FROM [IdentityServerDB].[dbo].[EnumUserRoles] WHERE [Role]='admin' )
INSERT INTO [IdentityServerDB].[dbo].[EnumUserRoles]
           ([Role]
           ,[Description]
           ,[CreatedBy]
           ,[UpdatedBy])
     VALUES
           ('admin', 'administrator', 'init script','init script')
END










BEGIN
IF NOT EXISTS (select ID FROM [IdentityServerDB].[dbo].[EnumTokenTypes] WHERE [Type]='JWT' )
INSERT INTO [IdentityServerDB].[dbo].[EnumTokenTypes]
           ([Type]
           ,[Description]
           ,[CreatedBy]
           ,[UpdatedBy])
     VALUES
           ('JWT', 'A JWT token.', 'init script','init script')
END

BEGIN
IF NOT EXISTS (select ID FROM [IdentityServerDB].[dbo].[EnumTokenTypes] WHERE [Type]='REF' )
INSERT INTO [IdentityServerDB].[dbo].[EnumTokenTypes]
           ([Type]
           ,[Description]
           ,[CreatedBy]
           ,[UpdatedBy])
     VALUES
           ('REF', 'A reference token.', 'init script','init script')
END



BEGIN
IF NOT EXISTS (select ID FROM [IdentityServerDB].[dbo].[EnumApiScopes] WHERE [Scope]='read' )
INSERT INTO [IdentityServerDB].[dbo].[EnumApiScopes]
           ([Scope]
           ,[Description]
           ,[CreatedBy]
           ,[UpdatedBy])
     VALUES
           ('read', 'Read permission', 'init script','init script')
END

BEGIN
IF NOT EXISTS (select ID FROM [IdentityServerDB].[dbo].[EnumApiScopes] WHERE [Scope]='insert' )
INSERT INTO [IdentityServerDB].[dbo].[EnumApiScopes]
           ([Scope]
           ,[Description]
           ,[CreatedBy]
           ,[UpdatedBy])
     VALUES
           ('insert', 'Read permission', 'init script','init script')
END

BEGIN
IF NOT EXISTS (select ID FROM [IdentityServerDB].[dbo].[EnumApiScopes] WHERE [Scope]='update' )
INSERT INTO [IdentityServerDB].[dbo].[EnumApiScopes]
           ([Scope]
           ,[Description]
           ,[CreatedBy]
           ,[UpdatedBy])
     VALUES
           ('update', 'Read permission', 'init script','init script')
END
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
